{"version":3,"file":"component---src-pages-edge-adobe-journey-optimizer-public-classes-and-enum-messaging-push-payload-md-f050a7c9db0e7777986a.js","mappings":"oTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGC,GAAK,YAER,OAAO,SAACJ,GAAS,UAAKD,EAAiBK,EAAK,CAAED,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,wBAAsB,yBAE9B,uOACA,2JAA4I,cAAGC,WAAW,IACtJ,KAAQ,+DAA6D,qDACX,MAC9D,eACE,GAAM,4CAA0C,6CAElD,mHACA,eACE,GAAM,UAAQ,WAEhB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,wLAOhC,eACE,GAAM,WAAS,YAEjB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,0YAahC,eACE,GAAM,eAAa,iBAErB,yIACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,opDAyChC,eACE,GAAM,8BAA4B,+BAEpC,mBAAG,mBAAQA,WAAW,KAAG,gBACzB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,wEAKhC,mBAAG,mBAAQA,WAAW,KAAG,mBACzB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,oVAiBpC,CAEAJ,EAAWK,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer/public-classes-and-enum/messaging-push-payload.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"messagingpushpayload\"\n    }}>{`MessagingPushPayload`}</h1>\n    <p>{`This document explains how to use MessagingPushPayload class for getting the notification attributes like title, body, actions etc for creating a push notification received from Adobe Journey Optimizer (AJO).`}</p>\n    <p>{`MessagePushPayload is an Android only helper class for extracting the data payload attributes from RemoteMessage. Use this class for `}<a parentName=\"p\" {...{\n        \"href\": \"../push-notification/android/manual-display-and-tracking.md\"\n      }}>{`manual display and tracking of push notifications`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"creating-the-messagingpushpayload-object\"\n    }}>{`Creating the MessagingPushPayload object`}</h2>\n    <p>{`Use the below constructors in the FirebaseMessagingService class's onMessageReceived method:`}</p>\n    <h4 {...{\n      \"id\": \"syntax\"\n    }}>{`Syntax`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`    // Using the remote message\n    public MessagingPushPayload(RemoteMessage message)\n \n    // Using the data map\n    public MessagingPushPayload(Map<String, String> data)\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// Using the remote message\n@Override\npublic void onMessageReceived(@NonNull RemoteMessage remoteMessage) {\n    MessagingPushPayload payload = new MessagingPushPayload(remoteMessage);\n}\n\n// Using the data map\n@Override\npublic void onMessageReceived(@NonNull RemoteMessage remoteMessage) {\n    MessagingPushPayload payload = new MessagingPushPayload(remoteMessage.getData());\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"public-apis\"\n    }}>{`Public API's`}</h2>\n    <p>{`Public APIs are used to get attributes from the push payload, which are used while creating the push notification.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// Returns the title from the remote message\npublic String getTitle()\n\n// Returns the body from the remote message \npublic String getBody()\n\n// Returns the sound from the remote message \n// The sound string represents the filename of a sound resource bundled in the app.\npublic String getSound()\n\n// Returns the notification badge count from the remote message \npublic int getBadgeCount()\n\n// Returns the notification priority from the remote message. \n// For more information, please read the Firebase documentation (https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#notificationpriority) \npublic int getNotificationPriority()\n\n// Returns the channel ID from the remote message. \npublic String getChannelId()\n\n// Returns the icon string from the remote message.\n// The icon string represents the drawable resource name in the app.\npublic String getIcon()\n\n// Returns the image URL from the remote message.\npublic String getImageUrl()\n\n// Returns the data map from the remote message.\npublic Map<String, String> getData()\n\n// Returns an ActionType object which represents the type of action which needs to be performed on push notification interaction.\n// More information about the ActionType enum definition can be found in the ActionType section below.\npublic ActionType getActionType()\n\n// Returns the action URI as a string. The action URI is used to direct the push notification interaction.\npublic String getActionUri()\n\n// Returns a list of ActionButtons. More information about the ActionButtons class definition can be found in the ActionButtons section below.\npublic List<ActionButton> getActionButtons()\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"internal-classes-and-enums\"\n    }}>{`Internal classes and enums`}</h3>\n    <p><strong parentName=\"p\">{`ActionType`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public enum ActionType {\n    DEEPLINK, WEBURL, OPENAPP, NONE\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`ActionButtons`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// Constructor\npublic ActionButton(final String label, final String link, final String type)\n\n// Public APIs\n\n// Returns the label for the action button\npublic String getLabel()\n\n// Returns the link for the action button\npublic String getLink()\n\n// Returns the ActionType for the action button\npublic ActionType getType()\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}